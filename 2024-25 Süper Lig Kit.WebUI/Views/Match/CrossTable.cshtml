@using _2024_25_Süper_Lig_Kit.Dto.MatchDtos
@using _2024_25_Süper_Lig_Kit.Dto.TeamDtos
@model List<Class1>
@{
    ViewData["Title"] = "CrossTable";
}


@* <table class="table table-striped table-wrap">
    <thead>
        <tr>
            <th>Id</th>
            <th>Teams</th>
            <th>Hakem</th>
            <th>Skor</th>
            <th>Formalar</th>
            <th>Hafta</th>
            <th>Tarih</th>

        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>


                <td> <img class="team-logo" width="50" height="50" src="@item.homeTeamLogo" /></td>
                @foreach (var item2 in item.kits)
                {
                    <td>
                        <img class="kit-image" width="50" height="50" src="@(item2.homeKit!=null? item2.homeKit?.imgPath:"/kits/blank.png")" />
                        <img class="kit-image" width="50" height="50" src="@(item2.awayKit!=null? item2.awayKit?.imgPath:"/kits/blank.png")" />
                    </td>
                }
                

            </tr>
        }
    </tbody>
</table> *@
<button onclick="abc()">btn</button>
<canvas width="8000" height="12000" id="myCanvas"></canvas>


<script type="text/javascript">
    // Ana fonksiyon
    function initializeCrossTable() {
        // Event listener ekleyerek sayfanın yüklenmesini bekleyelim
        document.addEventListener('DOMContentLoaded', function () {
            abc();
        });
    }

    // ABC fonksiyonunu async olarak tanımlayalım
    async function abc() {
        try {
            const data = await $.ajax({
                url: '@Url.Action("CrossTable2", "Match")',
                type: "GET",
                data: {}
            });
            await get(data);
        } catch (error) {
            console.error("Error in abc function:", error);
        }
    }

    // Resim yükleme yardımcı fonksiyonu
    function loadImage(src) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.onload = () => resolve(img);
            img.onerror = reject;
            img.src = src;
        });
    }

    // Get fonksiyonunu async olarak düzenleyelim
    async function get(data) {
        try {
            const canvas = document.getElementById('myCanvas');
            const ctx = canvas.getContext('2d');
            let x = 0;
            let y = 0;

            console.log(data);
            const jerseys = data;

            // Header row için team logolarını çizelim
            x = 350;
            for (let i = 0; i < jerseys.length-1; i++) {
                const team = jerseys[i];
                const teamLogo = team.homeTeamLogo;
                const teamLogoImg = await loadImage(teamLogo);
                ctx.drawImage(teamLogoImg, x, y);

                // Her logodan sonra dikey ayraç

                // let separatorX = x + 150;
                // ctx.beginPath();
                // ctx.strokeStyle = '#000000';
                // ctx.lineWidth = 2;
                // ctx.moveTo(separatorX, 0);
                // ctx.lineTo(separatorX, canvas.height);
                // ctx.stroke();
                 x += 400;
            }

            // Ana içeriği çizelim
            y += 300;
            x = 0;
            for (let i = 0; i < jerseys.length-1; i++) {
                const team = jerseys[i];
                const kits = team.kits;
                const teamLogo = team.homeTeamLogo;
                const teamLogoImg = await loadImage(teamLogo);
                ctx.drawImage(teamLogoImg, x+40, y+205);
              

                // Draw vertical separator
                ctx.beginPath();
                ctx.strokeStyle = '#fff';
                ctx.lineWidth = 2;
                ctx.moveTo(x + 170, 0);
                ctx.lineTo(x + 170, canvas.height);
                ctx.stroke();
                for (let j = 0; j < kits.length; j++) {
                    const kit = kits[j];
                    const homeKitPath = kit.homeKit ? kit.homeKit.imgPath : '/kits/blank.png';
                    const awayKitPath = kit.awayKit ? kit.awayKit.imgPath : '/kits/blank.png';

                    // Home kit'i yükle ve çiz
                    x += 50;
                    const homeKitImg = await loadImage(homeKitPath);
                    ctx.drawImage(homeKitImg, x, y, 500, 500);

                    // Away kit'i yükle ve çiz
                    x += 200;
                    const awayKitImg = await loadImage(awayKitPath);
                    ctx.drawImage(awayKitImg, x, y, 500, 500);

                    x += 150;
                    let separatorX = x + 210;
                    ctx.beginPath();
                    ctx.strokeStyle = '#fff';
                    ctx.lineWidth = 2;
                    ctx.moveTo(separatorX, 0);
                    ctx.lineTo(separatorX, canvas.height);
                    ctx.stroke();
                }

                // Her takım satırından sonra yatay ayraç
                ctx.beginPath();
                ctx.strokeStyle = '#fff';
                ctx.lineWidth = 2;
                ctx.moveTo(0, y + 525);
                ctx.lineTo(canvas.width, y + 525);
                ctx.stroke();

                // Tam takım bölümünden sonra dikey ayraç
                let separatorX = x + 50;
                ctx.beginPath();
                ctx.moveTo(separatorX, 0);
                ctx.lineTo(separatorX, canvas.height);
                ctx.stroke();

                x = 0;
                y += 550;
            }
        } catch (error) {
            console.error("Error in get function:", error);
        }
    }

    // Sayfanın yüklenmesi ile başlat
    initializeCrossTable();
</script>
<script>
    function we() {
        // Get the canvas element and its context
        var canvas = document.getElementById('myCanvas');
        var ctx = canvas.getContext('2d');

        // Get all images from the table
        var images = document.querySelectorAll('.team-logo, .kit-image');

        // Position variables for where to draw on the canvas
        var x = 0;
        var y = 0;
        var maxHeight = 0;

        // Load and draw each image
        images.forEach(function (img) {
            var image = new Image();
            image.src = img.src;

            image.onload = function () {
                // Draw the image on the canvas
                ctx.drawImage(image, x, y);

                // Update the x position for the next image
                x += 50;
                if (image.height > maxHeight) {
                    maxHeight = image.height;
                }

                // Move to the next row if needed
                if (x + 50 > canvas.width) {
                    x = 0;
                    y += maxHeight;
                    maxHeight = 0;
                }
            }
        });
    }
</script>