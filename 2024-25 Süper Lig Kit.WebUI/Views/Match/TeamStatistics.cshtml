@{
    ViewData["Title"] = "Takım Forma İstatistikleri";
}

<div class="container">
    <select id="teamSelect" class="form-control mb-3">
        <option value="">Takım Seçiniz</option>
    </select>
    <button onclick="getTeamStats()" class="btn btn-primary mb-3">Göster</button>
</div>

<canvas width="15000" height="15000" id="statsCanvas"></canvas>

<script type="text/javascript">
    // Sayfa yüklendiğinde takımları getir
    document.addEventListener('DOMContentLoaded', async () => {
        await loadTeams();
    });

    async function loadTeams() {
        try {
            const response = await fetch('/api/Teams');
            const teams = await response.json();
            const select = document.getElementById('teamSelect');

            teams.forEach(team => {
                const option = document.createElement('option');
                option.value = team.teamId;
                option.textContent = team.name;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Takımlar yüklenirken hata:', error);
        }
    }

    async function getTeamStats() {
        const teamId = document.getElementById('teamSelect').value;

        if (!teamId) return;

        const matches = await fetch(`/api/Matches/GetMatchesByTeam?teamId=${teamId}`).then(r => r.json());
        const statsData = processMatchStats(matches, teamId);
        await drawJerseyStats(statsData);
    }

    function processMatchStats(matches, teamId) {
        const stats = new Map();
        const gkStats = new Map(); // Kaleci formaları için ayrı map

        matches.forEach(match => {
            const isHome = match.homeTeamId === parseInt(teamId);
            const jerseyImage = isHome ? match.homeTeamJerseyImage : match.awayTeamJerseyImage;
            const gkJerseyImage = isHome ? match.homeTeamJerseyImageGK : match.awayTeamJerseyImageGK;

            // Normal forma istatistikleri
            if (jerseyImage) {
                const key = jerseyImage.jerseyId;
                if (!stats.has(key)) {
                    stats.set(key, {
                        imgPath: jerseyImage.jersey.path,
                        wins: 0,
                        draws: 0,
                        losses: 0,
                        total: 0
                    });
                }

                const currentStats = stats.get(key);
                currentStats.total++;

                if (match.homeMS !== null && match.awayMS !== null) {
                    if (isHome) {
                        if (match.homeMS > match.awayMS) currentStats.wins++;
                        else if (match.homeMS === match.awayMS) currentStats.draws++;
                        else currentStats.losses++;
                    } else {
                        if (match.awayMS > match.homeMS) currentStats.wins++;
                        else if (match.awayMS === match.homeMS) currentStats.draws++;
                        else currentStats.losses++;
                    }
                }
            }

            // Kaleci forması istatistikleri
            if (gkJerseyImage) {
                const key = gkJerseyImage.jerseyId;
                if (!gkStats.has(key)) {
                    gkStats.set(key, {
                        imgPath: gkJerseyImage.jersey.path,
                        wins: 0,
                        draws: 0,
                        losses: 0,
                        total: 0
                    });
                }

                const currentStats = gkStats.get(key);
                currentStats.total++;

                if (match.homeMS !== null && match.awayMS !== null) {
                    if (isHome) {
                        if (match.homeMS > match.awayMS) currentStats.wins++;
                        else if (match.homeMS === match.awayMS) currentStats.draws++;
                        else currentStats.losses++;
                    } else {
                        if (match.awayMS > match.homeMS) currentStats.wins++;
                        else if (match.awayMS === match.homeMS) currentStats.draws++;
                        else currentStats.losses++;
                    }
                }
            }
        });

        return { stats, gkStats };
    }

    async function drawJerseyStats(statsData) {
        try {
            const canvas = document.getElementById('statsCanvas');
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Normal formaları sırala
            const sortedStats = Array.from(statsData.stats.entries()).sort((a, b) => {
                return b[1].total - a[1].total;
            });

            // Kaleci formalarını sırala
            const sortedGKStats = Array.from(statsData.gkStats.entries()).sort((a, b) => {
                return b[1].total - a[1].total;
            });

            const jerseyWidth = 4000;
            const jerseyHeight = 4000;
            const spacing = 200;
            const circleRadius = 200;
            const fontSize = 128;

            // Normal formaları çiz
            let x = 200;
            let y = 200;
            
            await drawJerseyRow(ctx, sortedStats, x, y, jerseyWidth, jerseyHeight, spacing, circleRadius, fontSize);

            // Kaleci formalarını alt sıraya çiz
            y = y + jerseyHeight + 1000; // Alt sıraya geçmek için y koordinatını artır
            x = 200; // x koordinatını başa al
            
            // // Kaleci formaları başlığı
            // ctx.font = `${fontSize * 2}px Arial`;
            // ctx.fillStyle = 'black';
            // ctx.textAlign = 'center';
            // ctx.fillText('Kaleci Formaları', canvas.width / 2, y - 200);

            await drawJerseyRow(ctx, sortedGKStats, x, y, jerseyWidth, jerseyHeight, spacing, circleRadius, fontSize);

        } catch (error) {
            console.error('İstatistikler çizilirken hata:', error);
        }
    }

    // Forma sırasını çizmek için yardımcı fonksiyon
    async function drawJerseyRow(ctx, statsArray, x, y, jerseyWidth, jerseyHeight, spacing, circleRadius, fontSize) {
        for (const [jerseyId, stats] of statsArray) {
            try {
                const jerseyImg = await loadImage(stats.imgPath);
                ctx.drawImage(jerseyImg, x, y, jerseyWidth, jerseyHeight);

                // İstatistikleri çiz
                ctx.font = `${fontSize}px Arial`;
                ctx.textAlign = 'center';

                const centerX = x + (jerseyWidth / 2);
                const statsY = y + jerseyHeight + 200;

                // Galibiyet (Yeşil Daire)
                ctx.beginPath();
                ctx.arc(centerX - 500, statsY, circleRadius, 0, 2 * Math.PI);
                ctx.fillStyle = '#28a745';
                ctx.fill();
                ctx.fillStyle = 'white';
                ctx.fillText(stats.wins.toString(), centerX - 500, statsY + 40);

                // Beraberlik (Sarı Daire)
                ctx.beginPath();
                ctx.arc(centerX, statsY, circleRadius, 0, 2 * Math.PI);
                ctx.fillStyle = '#ffc107';
                ctx.fill();
                ctx.fillStyle = 'black';
                ctx.fillText(stats.draws.toString(), centerX, statsY + 40);

                // Mağlubiyet (Kırmızı Daire)
                ctx.beginPath();
                ctx.arc(centerX + 500, statsY, circleRadius, 0, 2 * Math.PI);
                ctx.fillStyle = '#dc3545';
                ctx.fill();
                ctx.fillStyle = 'white';
                ctx.fillText(stats.losses.toString(), centerX + 500, statsY + 40);

                // Toplam maç sayısı
                ctx.font = `${fontSize * 1.5}px Arial`;
                ctx.fillStyle = 'black';
                ctx.fillText(`Toplam: ${stats.total} maç`, centerX, statsY + 400);

                x += jerseyWidth + spacing;
            } catch (error) {
                console.error('Forma çizilirken hata:', error);
                continue;
            }
        }
    }

    function loadImage(src) {
        return new Promise((resolve, reject) => {
            if (!src) {
                reject(new Error('Resim yolu bulunamadı'));
                return;
            }

            const img = new Image();
            img.onload = () => resolve(img);
            img.onerror = () => reject(new Error(`Resim yüklenemedi: ${src}`));
            img.src = src;
        });
    }
</script>

<style>
    canvas {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        margin-top: 20px;
    }

    .container {
        max-width: 1200px;
        margin: 20px auto;
    }
</style>