@{
    ViewData["Title"] = "Takım Forma İstatistikleri";
}

<div class="container">
    <select id="teamSelect" class="form-control mb-3">
        <option value="">Takım Seçiniz</option>
    </select>
    <button onclick="getTeamStats()" class="btn btn-primary mb-3">Göster</button>
</div>

<canvas width="15000" height="15000" id="statsCanvas"></canvas>

<script type="text/javascript">
    // Sayfa yüklendiğinde takımları getir
    document.addEventListener('DOMContentLoaded', async () => {
        await loadTeams();
    });

    async function loadTeams() {
        try {
            const response = await fetch('https://localhost:7245/api/Teams');
            const teams = await response.json();
            const select = document.getElementById('teamSelect');

            teams.forEach(team => {
                const option = document.createElement('option');
                option.value = team.teamId;
                option.textContent = team.name;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Takımlar yüklenirken hata:', error);
        }
    }

    async function getTeamStats() {
        const teamId = document.getElementById('teamSelect').value;

        if (!teamId) return;

        const matches = await fetch(`https://localhost:7245/api/Matches/GetMatchesByTeam?teamId=${teamId}`).then(r => r.json());
        const jerseyStats = processMatchStats(matches,teamId);
        await drawJerseyStats(jerseyStats);
    }

    function processMatchStats(matches, teamId) {
        const stats = new Map();

        matches.forEach(match => {
            const isHome = match.homeTeamId === parseInt(teamId);
            const jerseyImage = isHome ? match.homeTeamJerseyImage : match.awayTeamJerseyImage;

            if (!jerseyImage) return;

            // Jersey ID'ye göre gruplama
            const key = jerseyImage.jerseyId;
            if (!stats.has(key)) {
                stats.set(key, {
                    imgPath: jerseyImage.jersey.path, // Jersey yerine doğrudan imgPath'i kullan
                    wins: 0,
                    draws: 0,
                    losses: 0,
                    total: 0
                });
            }

            const currentStats = stats.get(key);
            currentStats.total++;

            if (match.homeMS !== null && match.awayMS !== null) {
                if (isHome) {
                    if (match.homeMS > match.awayMS) currentStats.wins++;
                    else if (match.homeMS === match.awayMS) currentStats.draws++;
                    else currentStats.losses++;
                } else {
                    if (match.awayMS > match.homeMS) currentStats.wins++;
                    else if (match.awayMS === match.homeMS) currentStats.draws++;
                    else currentStats.losses++;
                }
            }
        });

        return stats;
    }

    async function drawJerseyStats(statsMap) {
        try {
            const canvas = document.getElementById('statsCanvas');
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            let x = 200;
            const y = 200;
            const jerseyWidth = 4000;
            const jerseyHeight = 4000;
            const spacing = 200;
            const circleRadius = 100;

            for (const [jerseyId, stats] of statsMap) {
                try {
                    // Doğrudan imgPath'i kullan
                    const jerseyImg = await loadImage(stats.imgPath);
                    ctx.drawImage(jerseyImg, x, y, jerseyWidth, jerseyHeight);

                    // İstatistikleri çiz
                    ctx.font = '64px Arial';
                    ctx.textAlign = 'center';

                    const centerX = x + (jerseyWidth / 2);
                    const statsY = y + jerseyHeight + 100;

                    // Galibiyet (Yeşil Daire)
                    ctx.beginPath();
                    ctx.arc(centerX - 250, statsY, circleRadius, 0, 2 * Math.PI);
                    ctx.fillStyle = '#28a745';
                    ctx.fill();
                    ctx.fillStyle = 'white';
                    ctx.fillText(stats.wins.toString(), centerX - 250, statsY + 20);

                    // Beraberlik (Sarı Daire)
                    ctx.beginPath();
                    ctx.arc(centerX, statsY, circleRadius, 0, 2 * Math.PI);
                    ctx.fillStyle = '#ffc107';
                    ctx.fill();
                    ctx.fillStyle = 'black';
                    ctx.fillText(stats.draws.toString(), centerX, statsY + 20);

                    // Mağlubiyet (Kırmızı Daire)
                    ctx.beginPath();
                    ctx.arc(centerX + 250, statsY, circleRadius, 0, 2 * Math.PI);
                    ctx.fillStyle = '#dc3545';
                    ctx.fill();
                    ctx.fillStyle = 'white';
                    ctx.fillText(stats.losses.toString(), centerX + 250, statsY + 20);

                    // Toplam maç sayısı
                    ctx.fillStyle = 'black';
                    ctx.fillText(`Toplam: ${stats.total} maç`, centerX, statsY + 200);

                    x += jerseyWidth + spacing;
                } catch (error) {
                    console.error('Forma çizilirken hata:', error);
                    continue; // Hatalı forma için döngüye devam et
                }
            }
        } catch (error) {
            console.error('İstatistikler çizilirken hata:', error);
        }
    }

    function loadImage(src) {
        return new Promise((resolve, reject) => {
            if (!src) {
                reject(new Error('Resim yolu bulunamadı'));
                return;
            }

            const img = new Image();
            img.onload = () => resolve(img);
            img.onerror = () => reject(new Error(`Resim yüklenemedi: ${src}`));
            img.src = src;
        });
    }
</script>

<style>
    canvas {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        margin-top: 20px;
    }

    .container {
        max-width: 1200px;
        margin: 20px auto;
    }
</style>