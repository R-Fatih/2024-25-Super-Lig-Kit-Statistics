@{
    ViewData["Title"] = "Forma KullanÄ±m Heatmap";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h2 class="text-center mb-4">ðŸ”¥ Forma KullanÄ±m Heatmap Analizi</h2>
            <div class="text-center mb-3">
                <button onclick="loadHeatmapData()" class="btn btn-primary btn-lg">
                    <i class="fas fa-fire"></i> Heatmap YÃ¼kle
                </button>
                <button onclick="downloadCanvas()" class="btn btn-success btn-lg ml-2">
                    <i class="fas fa-download"></i> Ä°ndir
                </button>
                <a href="@Url.Action("GoalkeeperKitUsageHeatmap", "Statics")" class="btn btn-warning btn-lg ml-2">
                    <i class="fas fa-shield-alt"></i> Kaleci FormalarÄ±
                </a>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <canvas id="heatmapCanvas" width="1800" height="3000" style="border: 2px solid #333; background: linear-gradient(135deg, #000428 0%, #004e92 100%);"></canvas>
        </div>
    </div>
</div>

<script type="text/javascript">
    async function loadHeatmapData() {
        try {
            const response = await fetch('https://localhost:7245/api/Statics/GetKitUsageHeatmapData');
            const data = await response.json();
            await drawHeatmapChart(data);
        } catch (error) {
            console.error('Error loading heatmap data:', error);
            alert('Veri yÃ¼klenirken hata oluÅŸtu!');
        }
    }

    async function drawHeatmapChart(data) {
        const canvas = document.getElementById('heatmapCanvas');
        const ctx = canvas.getContext('2d');
        
        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Title
 

        // Group data by team
        const teamData = {};
        data.forEach(item => {
            if (!teamData[item.teamName]) {
                teamData[item.teamName] = {
                    kits: [],
                    logoUrl: item.logoUrl
                };
            }
            teamData[item.teamName].kits.push(item);
        });
        
        const teams = Object.keys(teamData);
        const maxTeams = Math.min(teams.length, 20);
        
        // Calculate dimensions
        const cellSize = 80;
        const margin = 120; // Increased margin for logos
        const startX = margin;
        const startY = 100;
        
        // Find max usage for color scaling
        const maxUsage = Math.max(...data.map(d => d.usageCount));
        
        // Pre-load all team logos
        const logoPromises = teams.slice(0, maxTeams).map(team => {
            return new Promise((resolve) => {
                const teamInfo = teamData[team];
                if (teamInfo.logoUrl && teamInfo.logoUrl.trim() !== '') {
                    const img = new Image();
                    img.onload = () => resolve({ team, img });
                    img.onerror = () => resolve({ team, img: null });
                    img.src = teamInfo.logoUrl;
                } else {
                    resolve({ team, img: null });
                }
            });
        });
        
        // Wait for all logos to load, then draw heatmap
        const logoResults = await Promise.all(logoPromises);
        
        // Draw team logos
        logoResults.forEach((result, i) => {
            const y = startY + (i * cellSize);
            if (result.img) {
                ctx.drawImage(result.img, startX - 100, y, cellSize - 5, cellSize - 5);
            } else {
                // Fallback to team name if no logo
                ctx.fillStyle = '#ffffff';
                ctx.font = "10px Arial";
                ctx.textAlign = "right";
                ctx.fillText(result.team.substring(0, 8), startX - 10, y + cellSize/2 + 5);
            }
        });
        
        // Find all unique kits
        const allKits = [...new Set(data.map(d => d.body))];
        const maxKits = Math.min(allKits.length, 30);
        
        // Draw kit labels (rotated)
        ctx.fillStyle = '#ffffff';
        ctx.font = "20px Arial";
        
        for (let j = 0; j < maxKits; j++) {
            const kit = allKits[j];
            const x = startX + (j * cellSize) + cellSize/2;
            
            ctx.save();
            ctx.translate(x, startY - 20);
            ctx.rotate(-Math.PI/4);
            ctx.textAlign = "left";
            ctx.fillText(kit.substring(0, 8), 0, 0);
            ctx.restore();
        }
        
        // Draw heatmap cells
        for (let i = 0; i < maxTeams; i++) {
            const team = teams[i];
            const teamKits = teamData[team].kits;
            
            for (let j = 0; j < maxKits; j++) {
                const kit = allKits[j];
                const x = startX + (j * cellSize);
                const y = startY + (i * cellSize);
                
                // Find usage for this team-kit combination
                const usage = teamKits.find(tk => tk.body === kit);
                const usageCount = usage ? usage.usageCount : 0;
                const usagePercentage = usage ? usage.usagePercentage : 0;
                
                // Calculate color intensity
                const intensity = usageCount / maxUsage;
                const red = Math.floor(255 * intensity);
                const green = Math.floor(255 * (1 - intensity) * 0.3);
                const blue = Math.floor(255 * (1 - intensity) * 0.5);
                
                // Draw cell
                ctx.fillStyle = `rgb(${red}, ${green}, ${blue})`;
                ctx.fillRect(x, y, cellSize - 1, cellSize - 1);
                
                // Draw usage count if significant
                if (usageCount > 0) {
                    ctx.fillStyle = intensity > 0.5 ? '#ffffff' : '#000000';
                    ctx.font = "20px Arial";
                    ctx.textAlign = "center";
                    ctx.fillText(usageCount.toString(), x + cellSize/2, y + cellSize/2 + 3);
                    
                    if (usagePercentage >= 10) {
                        ctx.font = "18px Arial";
                        ctx.fillText(`%${usagePercentage.toFixed(0)}`, x + cellSize/2, y + cellSize/2 + 28);
                    }
                }
                
                // Draw border
                ctx.strokeStyle = '#333333';
                ctx.lineWidth = 0.5;
                ctx.strokeRect(x, y, cellSize - 1, cellSize - 1);
            }
        }
        
        // Draw color scale legend
        drawColorScale(ctx, canvas.width - 200, 150, maxUsage);
        
        // Draw statistics
     //   drawHeatmapStats(ctx, data, 50, canvas.height - 150);
    }
    
    function drawColorScale(ctx, x, y, maxUsage) {
        const scaleWidth = 150;
        const scaleHeight = 20;
        
        // Draw background
        ctx.fillStyle = 'rgba(0,0,0,0.8)';
        ctx.fillRect(x - 10, y - 30, scaleWidth + 20, 100);
        ctx.strokeStyle = '#ffffff';
        ctx.lineWidth = 2;
        ctx.strokeRect(x - 10, y - 30, scaleWidth + 20, 100);
        
        // Title
        ctx.fillStyle = '#ffffff';
        ctx.font = "bold 12px Arial";
        ctx.textAlign = "left";
        ctx.fillText("ðŸ”¥ KullanÄ±m YoÄŸunluÄŸu", x, y - 10);
        
        // Draw gradient
        for (let i = 0; i < scaleWidth; i++) {
            const intensity = i / scaleWidth;
            const red = Math.floor(255 * intensity);
            const green = Math.floor(255 * (1 - intensity) * 0.3);
            const blue = Math.floor(255 * (1 - intensity) * 0.5);
            
            ctx.fillStyle = `rgb(${red}, ${green}, ${blue})`;
            ctx.fillRect(x + i, y, 1, scaleHeight);
        }
        
        // Draw scale labels
        ctx.fillStyle = '#ffffff';
        ctx.font = "10px Arial";
        ctx.textAlign = "center";
        ctx.fillText("0", x, y + 35);
        ctx.fillText(Math.floor(maxUsage/2).toString(), x + scaleWidth/2, y + 35);
        ctx.fillText(maxUsage.toString(), x + scaleWidth, y + 35);
        
        ctx.textAlign = "left";
        ctx.fillText("Az", x, y + 50);
        ctx.textAlign = "right";
        ctx.fillText("Ã‡ok", x + scaleWidth, y + 50);
    }
    
    function drawHeatmapStats(ctx, data, x, y) {
        ctx.fillStyle = 'rgba(0,0,0,0.9)';
        ctx.fillRect(x, y, 800, 120);
        ctx.strokeStyle = '#ffffff';
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, 800, 120);
        
        // Calculate statistics
        const totalUsage = data.reduce((sum, item) => sum + item.usageCount, 0);
        const avgUsage = totalUsage / data.length;
        const maxUsageItem = data.reduce((max, item) => item.usageCount > max.usageCount ? item : max);
        const uniqueTeams = new Set(data.map(d => d.teamName)).size;
        const uniqueKits = new Set(data.map(d => d.body)).size;
        
          }
    
    function downloadCanvas() {
        const canvas = document.getElementById('heatmapCanvas');
        const link = document.createElement('a');
        link.download = 'forma-kullanim-heatmap.png';
        link.href = canvas.toDataURL();
        link.click();
    }

    // Auto load data when page loads
    window.onload = function() {
        setTimeout(loadHeatmapData, 500);
    };
</script>

<style>
    #heatmapCanvas {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        margin: 0 auto;
        display: block;
    }
    
    .container-fluid {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        min-height: 100vh;
        padding: 20px;
    }
    
    h2 {
        color: white;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    }
</style> 